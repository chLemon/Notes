```java
// 数组
int[] arrayA = new int[10];
int[] array = new int[]{1,2,3};
int[] array2 = {1,2,3};

int l = array.length;
//array.fori
//5.fori

//Scanner
Scanner sc = new Scanner(System.in);
String str = sc.next();

//Random
Random rd = new Random();
rd.nextInt(5);//不输入参数，则为int所有范围，包括正负，输入为[0,n)

//ArrayList
ArrayList<String> list = new ArrayList<>();//泛型只能是引用类型
boolean b = list.add("a");
String s = list.get(0);
String s2 = list.remove(0);
int n = list.size();

//String
String str1 = "abc";
String str2 = "123";
str1.equals(str2);
str1.equalsIgnoreCase(str2);//忽略大小写
int stringn = str.length();
String str3 = str1.concat(str2);

char c = str1.charAt(0);
int n2 = str1.indexOf("abc");

String sub = str1.substring(5);//一直到末尾
String sub2 = str.substring(1,2);//左闭右开

char[] chars = str.toCharArray();//拆分成字符数组
byte[] bytes = str.getBytes();

String re = str.replace(str1,str2);//把str1都换成str2
String[] split = str.split("a");//分割，里面传的是个正则表达式
boolean b2 = str.endsWith("a");


String str23 = Arrays.toString(array);
Arrays.sort(array);
//5.fori  5.forr

```


```
//Object
clone()
getClass()
equals(Object obj)
toString()
hashCode()

//Objects
equals(Object a, Object b);//空指针安全
requireNonNull

//Date
System.currentTimeMillis()
getTime()

//DateFormat抽象类
String format(Date date)
Date parse(String source)
//SimpleDateFormat
SimpleDateFormat(String pattern)

//Calendar抽象类
getInstance();获得一个通用对象
get("YEAR");YEAR/MONTH/DATE/HOUR/MINUTE/SECOND
set("YEAR",2011)
add(YEAR,1);//2012
getTime();返回Date

//System
currentTimeMillis()
arraycopy()

//StringBuilder
append
toString

//包装类
valueOf()
intValue();//拆箱
parseXXXString(str)


//Collection接口
add
clear
remove
contains
isEmpty
size
toArray
iterator();//返回一个迭代器

//Iterator接口
hasNext
next

//Colletions
shuffle
addAll
sort//该方法有个重载，传入一个Comparator接口，1-2是升序；参与排序的方法要实现Comparable，this-参数升序

//List
add
get
remove
set
//ArrayList

//LinkedList
addFirst
push
addLast
getFirst
getLast
removeFirst
pop
removeLast
isEmpty

//Set没有索引
//LinkedHashSet

//Map
put
remove
get
containKey
keySet
entrySet
//Entry,Map的内部类
getKey
getValue

//List、Map、Set接口有个of方法，批量导入，生成一个不能改变的集合

//throwable这个不重要
getMessage
toString
printStackTrace

//多线程
1. 创建Thread子类的实现类
2. Thread()里传一个Runnable接口的实现类
start()
stop()
sleep()


//锁ReentrantLock 
lock()
unlock()

//锁对象
wait()
notify()
notifyAll()

//线程池Executors
newFixedThreadPool()
submit


//File
getAbsolutePath
getPath
getName
length()//文件大小

exists
isDirectory
isFile

createNewFile
delete
mkdir
mkdirs
list
listFiles
File[] listFiles(FileFilter filter);
File[] listFiles(FilenameFilter filter);接口方法accept


//IO
//OutputStream
close
flush
write
//FileOutputStream
构造方法中append追加开关

//InputStream
read
close
//FileInputStream

//Reader
read
close
//FileReader 

//Writer
write
flush
close
//FileWriter 
构造方法中append追加开关

流的trycatch写法：流定义写到try后面的小括号里


//Properties与IO有关的集合
setProperty
getProperty
stringPropertyNames
store
load


//BufferedOutputStream
close();
flush();
write();
//BufferedInputStream
close();
read();
//BufferedWriter
write();
close();
flush();
newLine()//!!!
//BufferedReader
close();
read();
readLine()//!!!


//转换流
//OutputStreamWriter
//InputStreamWriter

//ObjectOutputStream序列化
writeOject
//ObjectInputStream反序列化
readObject

transient和static都不能被序列化
serialVersionUID

//PrintStream打印流
print
println
System.setOut

//Socket客户端
getOutputStream
getInputStream
close
shutdownOutput

//ServerSocket
accept


@FuntionalInterface
//Supplier生产
//Consumer消费
andThen
//Predicate判断
and
or
negate
//Function转换类型
andThen


//流
所有Collection：
stream
//终结方法
count
forEach
//延迟方法
filter//过滤
map//映射
limit//前几个
skip//跳过
concat//组合

::方法引用，简化lambda


```